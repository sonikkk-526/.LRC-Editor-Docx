{"version":3,"file":"js/92.44910ff3.js","mappings":"80CAmE8BA,EAAAA,EAAAA,GAAI,mB,GAAAA,EAAAA,EAAAA,GAAI,mB,GAEcA,EAAAA,EAAAA,GAAc,YAAR,KAAC,G,GAE0BA,EAAAA,EAAAA,GAAI,mB,GAAAA,EAAAA,EAAAA,GAAI,mB,GAGhBA,EAAAA,EAAAA,GAAI,mB,kFAzE/EC,GAgEAD,EAAAA,EAAAA,GAUI,mBAVD,kIAEyBE,EAAIC,GAAI,6DAEcC,GAAc,sNAEmBC,EAAIC,GAAI,oFAGxFC,EAAAA,EAAAA,IAAsEC,EAAA,CAAzDC,GAAI,CAAAC,KAAA,mBAAwB,C,kBAAE,iBAAc,UAAd,kB,mBAA2B,MAAEC,KAAI,G,aCzEjF,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,G","sources":["webpack://lrc-docs/./src/components/Pages/Trim/TrimOption.vue","webpack://lrc-docs/./src/components/Pages/Trim/TrimOption.vue?d509"],"sourcesContent":["<template>\r\n  <h1>Other options</h1>\r\n  <p>To help you create your LRC file easier, there are two other options to help with it:</p>\r\n  <p><u>1.</u> \"Ignore Timestamps\": Takes in a LRC file and remove all timestamps, outputting only the lyrics-</p>\r\n  <div class=\"block-container\">\r\n    <div>\r\n      <span>Input:</span>\r\n      <blockquote>\r\n        <p>\r\n          [00:06.94]描いた地図は引き裂いた<br>\r\n          [00:10.77]世界はあの日のまま<br>\r\n          [00:14.66]僕はまた<br>\r\n          [00:17.33]誰かのせいにした<br>\r\n          [00:21.53]嫌になっちゃうな<br>\r\n          etc...\r\n        </p>\r\n      </blockquote>\r\n    </div>\r\n\r\n    <div>\r\n      <span>Output:</span>\r\n      <blockquote>\r\n        <p>\r\n          描いた地図は引き裂いた<br>\r\n          世界はあの日のまま<br>\r\n          僕はまた<br>\r\n          誰かのせいにした<br>\r\n          嫌になっちゃうな<br>\r\n          etc...\r\n        </p>\r\n      </blockquote>\r\n    </div>\r\n  </div>\r\n  <i>It is a handy option if you found a LRC file and only need the lyrics portion.</i><br><br>\r\n\r\n  <p><u>2.</u> \"Discard Lyrics\": Removing all the lyrics such that it only contains the timestamp (most convenient option imo)-</p>\r\n  <div class=\"block-container\">\r\n    <div>\r\n      <span>Input:</span>\r\n      <blockquote>\r\n        <p>\r\n          [00:06.94]描いた地図は引き裂いた<br>\r\n          [00:10.77]世界はあの日のまま<br>\r\n          [00:14.66]<br>\r\n          [00:17.33]誰かのせいにした<br>\r\n          [00:21.53]嫌になっちゃうな<br>\r\n          etc...\r\n        </p>\r\n      </blockquote>\r\n    </div>\r\n\r\n    <div>\r\n      <span>Output:</span>\r\n      <blockquote>\r\n        <p>\r\n          [00:06.94]x<br>\r\n          [00:10.77]x<br>\r\n          [00:14.66]<br>\r\n          [00:17.33]x<br>\r\n          [00:21.53]x<br>\r\n          etc...\r\n        </p>\r\n      </blockquote>\r\n    </div>\r\n  </div>\r\n  <i>\r\n    Occasionally you may have a .LRC file and would want to change the lyrics out for another language\r\n    (ie. japanese -> english).<br><br>\r\n\r\n    Rather than doing it by hand for 30+ lines, the <code>x</code> represents there was a line of lyrics\r\n    there (because sometimes .LRC file may use empty lines to separate the structure:\r\n    (ie. intro, verse, pre-chorus, chorus, bridge, inter, instrumental solo, outro)).<br><br>\r\n\r\n    With this in mind, we could utilize this feature and combine it with\r\n    \"<RouterLink :to=\"{name: 'editor-merging'}\">Lyrics Merging</RouterLink>\".<br>\r\n  </i>\r\n</template>","import { render } from \"./TrimOption.vue?vue&type=template&id=2e18f33a\"\nconst script = {}\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","_hoisted_1","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_createVNode","_component_RouterLink","to","name","_hoisted_15","script","__exports__","render"],"sourceRoot":""}